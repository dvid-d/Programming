
def ExecuteCMP(Registers, Memory, Address):
  Value = Registers[ACC] - Memory[Address].OperandValue
  Registers = SetFlags(Value, Registers)
  return Registers
  
def ExecuteSUBimm(Registers, Address):
  Registers[ACC] = Registers[ACC] - Address
  Registers = SetFlags(Registers[ACC], Registers)
  if Registers[STATUS] == ConvertToDecimal("001"):
    ReportRunTimeError("Overflow", Registers)
  return Registers

def ExecuteADDimm(Registers, Address):
  Registers[ACC] = Registers[ACC] + Address
  Registers = SetFlags(Registers[ACC], Registers)
  if Registers[STATUS] == ConvertToDecimal("0010"):
    ReportRunTimeError("Overflow", Registers)
  return Registers

def ExecuteMVNimm(Registers, Address):
  Value = ~ Address
  Registers[ACC] = Value
  return Registers

def ExecuteMVN(Registers, Memory, Address):
  Value = Memory[Address].OperandValue
  Value = ~ Value
  Registers[ACC]= Value
  return Registers

def SaveFile(SourceCode):
  FileName = input("Enter a name to save the program as: ")
  File = open(FileName + ".txt","w")
  try:
    for Line in range(1, len(SourceCode)):
      File.write(SourceCode[Line] + "\n")
    File.close()
    print("File saved successfully.")
  except:
    print("An error has occoured")

def EditSourceCode(SourceCode):
  LineNumber = 0
  while LineNumber <= 0 or LineNumber > int(SourceCode[0]):
    LineNumber = int(input("Enter a valid line number of code to edit: "))
  print(SourceCode[LineNumber])
  Choice = EMPTY_STRING
  while Choice != "C":
    Choice = EMPTY_STRING
    while Choice != "E" and Choice != "C":
      print("E - Edit this line")
      print("C - Cancel edit")
      Choice = input("Enter your choice: ")
    if Choice == "E":
      SourceCode[LineNumber] = input("Enter the new line: ")
    DisplaySourceCode(SourceCode)
  return SourceCode
 
 def Assemble(SourceCode, Memory):
  Memory = ResetMemory(Memory)
  NumberOfLines = int(SourceCode[0])
  SymbolTable = {}
  Memory, SymbolTable = PassOne(SourceCode, Memory, SymbolTable)
  if Memory[0].OpCode != "ERR":
    Memory[0].OpCode = "JMP"
    if "START" in SymbolTable:
      Memory[0].OperandValue = SymbolTable["START"]
    elif "HLT" not in SymbolTable:
      Memory[0].OpCode = "ERR"
    else:
      Memory[0].OperandValue = 1 
    Memory = PassTwo(Memory, SymbolTable, NumberOfLines)
  return Memory
 
## Create any new test files where necessary
## Don't forget to download and upload latest version of program
## Don't forget to modify the symbol table and the Execute subroutine
